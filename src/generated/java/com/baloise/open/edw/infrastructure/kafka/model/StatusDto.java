/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.baloise.open.edw.infrastructure.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Provides the data transfer object used to store and retrieve workflow status objects. */
@org.apache.avro.specific.AvroGenerated
public class StatusDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4348311996335679075L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StatusDto\",\"namespace\":\"com.baloise.open.edw.infrastructure.kafka.model\",\"doc\":\"Provides the data transfer object used to store and retrieve workflow status objects.\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Provides unique name for a client that has created the event.\"},{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Provides unique name for a topic this event is referring to.\"},{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Provides the type such as created, shutdown, etc.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StatusDto> ENCODER =
      new BinaryMessageEncoder<StatusDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StatusDto> DECODER =
      new BinaryMessageDecoder<StatusDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StatusDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StatusDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StatusDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StatusDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StatusDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StatusDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StatusDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StatusDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Provides unique name for a client that has created the event. */
  private java.lang.String clientId;
  /** Provides unique name for a topic this event is referring to. */
  private java.lang.String topic;
  /** Provides the type such as created, shutdown, etc. */
  private java.lang.String eventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StatusDto() {}

  /**
   * All-args constructor.
   * @param clientId Provides unique name for a client that has created the event.
   * @param topic Provides unique name for a topic this event is referring to.
   * @param eventType Provides the type such as created, shutdown, etc.
   */
  public StatusDto(java.lang.String clientId, java.lang.String topic, java.lang.String eventType) {
    this.clientId = clientId;
    this.topic = topic;
    this.eventType = eventType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return topic;
    case 2: return eventType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = value$ != null ? value$.toString() : null; break;
    case 1: topic = value$ != null ? value$.toString() : null; break;
    case 2: eventType = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return Provides unique name for a client that has created the event.
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Sets the value of the 'clientId' field.
   * Provides unique name for a client that has created the event.
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'topic' field.
   * @return Provides unique name for a topic this event is referring to.
   */
  public java.lang.String getTopic() {
    return topic;
  }


  /**
   * Sets the value of the 'topic' field.
   * Provides unique name for a topic this event is referring to.
   * @param value the value to set.
   */
  public void setTopic(java.lang.String value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return Provides the type such as created, shutdown, etc.
   */
  public java.lang.String getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * Provides the type such as created, shutdown, etc.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Creates a new StatusDto RecordBuilder.
   * @return A new StatusDto RecordBuilder
   */
  public static com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder newBuilder() {
    return new com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder();
  }

  /**
   * Creates a new StatusDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StatusDto RecordBuilder
   */
  public static com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder newBuilder(com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder other) {
    if (other == null) {
      return new com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder();
    } else {
      return new com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder(other);
    }
  }

  /**
   * Creates a new StatusDto RecordBuilder by copying an existing StatusDto instance.
   * @param other The existing instance to copy.
   * @return A new StatusDto RecordBuilder
   */
  public static com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder newBuilder(com.baloise.open.edw.infrastructure.kafka.model.StatusDto other) {
    if (other == null) {
      return new com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder();
    } else {
      return new com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for StatusDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StatusDto>
    implements org.apache.avro.data.RecordBuilder<StatusDto> {

    /** Provides unique name for a client that has created the event. */
    private java.lang.String clientId;
    /** Provides unique name for a topic this event is referring to. */
    private java.lang.String topic;
    /** Provides the type such as created, shutdown, etc. */
    private java.lang.String eventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.topic)) {
        this.topic = data().deepCopy(fields()[1].schema(), other.topic);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing StatusDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.baloise.open.edw.infrastructure.kafka.model.StatusDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.topic)) {
        this.topic = data().deepCopy(fields()[1].schema(), other.topic);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'clientId' field.
      * Provides unique name for a client that has created the event.
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * Provides unique name for a client that has created the event.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * Provides unique name for a client that has created the event.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * Provides unique name for a client that has created the event.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'topic' field.
      * Provides unique name for a topic this event is referring to.
      * @return The value.
      */
    public java.lang.String getTopic() {
      return topic;
    }


    /**
      * Sets the value of the 'topic' field.
      * Provides unique name for a topic this event is referring to.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder setTopic(java.lang.String value) {
      validate(fields()[1], value);
      this.topic = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * Provides unique name for a topic this event is referring to.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'topic' field.
      * Provides unique name for a topic this event is referring to.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * Provides the type such as created, shutdown, etc.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * Provides the type such as created, shutdown, etc.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder setEventType(java.lang.String value) {
      validate(fields()[2], value);
      this.eventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * Provides the type such as created, shutdown, etc.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventType' field.
      * Provides the type such as created, shutdown, etc.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.StatusDto.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StatusDto build() {
      try {
        StatusDto record = new StatusDto();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.String) defaultValue(fields()[0]);
        record.topic = fieldSetFlags()[1] ? this.topic : (java.lang.String) defaultValue(fields()[1]);
        record.eventType = fieldSetFlags()[2] ? this.eventType : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StatusDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<StatusDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StatusDto>
    READER$ = (org.apache.avro.io.DatumReader<StatusDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.clientId);

    out.writeString(this.topic);

    out.writeString(this.eventType);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.clientId = in.readString();

      this.topic = in.readString();

      this.eventType = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.clientId = in.readString();
          break;

        case 1:
          this.topic = in.readString();
          break;

        case 2:
          this.eventType = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










